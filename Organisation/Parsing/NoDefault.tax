NoDefault: no error-localising default branch

Parser generators are great for everything, except for one aspect: error
handling. There are many methods that use heuristics in an attempt to improve
the situation, but error detection, localisation and reporting in manually
written parsers is always incomparably better than in generated ones. However,
there are certain tricks experienced grammar engineers use to improve the
situation. For example, consider a DSL where each statement starts with a
keyword and ends with a period. An obvious improvement to the na√Øve approach
would be to, for instance, once a keyword [code]MAP[/code] is recognised, have
a panic mode setup or some other semiparsing
[cite]CSMR-WCRE-2014-Zaytsev[/cite] machinery to fail locally and report on an
``error in a map statement'' rather than pointlessly try to backtrack and fail
at the general statement level. To do this, one has to have a special
[emph]default[/emph] case among the rules for each particular statement kind.
This recipe is more often observed in grammars written for frameworks where
ordered choice is more natural (TXL, PEGs, etc).

Related: MDC|Missing Default Case
Related: AR|Assertion Roulette
