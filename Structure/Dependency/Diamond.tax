Diamond: A is X and B is X, but C is A or B

A well-known pattern in dependency and inclusion is then a class A inherits
from class X and class B also inherits from class X, but class C inherits from
both A and B and thus gets to see double of each of X's elements. The problem
is solved differently in different programming and modelling languages---in
grammars, it causes an ambiguity[zoo]ISO/IEC 23270:2003(E)|#csharp_v1.x_iso-23270-2003_extracted|Information technology — Programming languages — C Sharp|extracted[/zoo]:

[example]
reference-type ::= class-type | interface-type
                 | delegate-type | ... ;
class-type ::= type-name | "object" | "string";
interface-type ::= type-name ;
delegate-type ::= type-name ;
[/example]

Parsing something recognisable as [code]type-name[/code] will cause at least a
triple ambiguity since it will be an acceptable [code]class-type[/code],
[code]interface-type[/code] as well as [code]delegate-type[/code]
[gwnet]Too-Sharp2005[/gwnet].

Related: AAI|Ambiguous Interfaces
